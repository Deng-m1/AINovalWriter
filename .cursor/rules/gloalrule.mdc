---
description: 
globs: 
alwaysApply: false
---
---
description: 
globs: 
alwaysApply: false
---
---
description: 
globs: *
alwaysApply: false
---
# AI写作软件项目全局配置
project_config:
  name: "ai-novel-assistant"
  description: "AI驱动的小说创作管理系统"

# 后端配置
backend:
  framework: "spring-boot"
  version: "3.2.0"
  java_version: "23"
  base_package: "com.ainovel"


# 前端配置
frontend:
  framework: "flutter"
  web_first: true


# 数据结构
  rule：数据结构，noval和act是一对多关系  act和chapter是一对多关系，chapter和sense是一对多关系，sense和摘要是一对一关系

# AINovalWriter 项目架构说明

## 项目概述

AINovalWriter 是一个AI辅助小说创作平台，包含前端应用（Flutter）和后端服务（Spring Boot）两个主要部分。

## 目录结构

```
AINovalWriter/
├── AINoval/                    # 前端项目（Flutter）
│   ├── lib/                    # 前端源代码
│   │   ├── blocs/              # 业务逻辑组件
│   │   ├── config/             # 配置文件
│   │   ├── l10n/               # 国际化资源
│   │   ├── models/             # 数据模型
│   │   ├── repositories/       # 数据仓库
│   │   ├── screens/            # 页面组件
│   │   ├── services/           # 服务层
│   │   ├── utils/              # 工具类
│   │   └── main.dart           # 应用入口
│   ├── assets/                 # 静态资源
│   ├── test/                   # 测试代码
│   ├── web/                    # Web相关文件
│   ├── pubspec.yaml            # 依赖管理
│   └── README.md               # 前端项目说明
│
├── AINovalServer/              # 后端项目（Spring Boot）
│   ├── src/                    # 后端源代码
│   │   ├── main/
│   │   │   ├── java/com/ainovel/server/
│   │   │   │   ├── common/     # 通用工具和常量
│   │   │   │   ├── config/     # 配置类
│   │   │   │   ├── domain/     # 领域模型
│   │   │   │   ├── repository/ # 数据访问层
│   │   │   │   ├── security/   # 安全相关
│   │   │   │   ├── service/    # 业务服务层
│   │   │   │   ├── web/        # Web控制器
│   │   │   │   └── AiNovelServerApplication.java # 应用入口
│   │   │   └── resources/      # 资源文件
│   │   └── test/               # 测试代码
│   ├── pom.xml                 # Maven依赖管理
│   ├── README.md               # 后端项目说明
│   └── PERFORMANCE_TESTING.md  # 性能测试文档
│
├── postman/                    # Postman测试集合
├── 原型图/                      # UI/UX原型设计
├── 需求文档/                    # 项目需求文档
├── 测试计划与文档/               # 测试相关文档
├── 后端开发文档/                 # 后端开发文档
└── 前端产品敏捷迭代计划/          # 前端迭代计划
```

## 技术架构

### 前端技术栈

- **框架**: Flutter
- **状态管理**: Bloc模式
- **网络请求**: 服务层与仓库模式
- **国际化**: l10n支持

### 后端技术栈

- **框架**: Spring Boot
- **安全**: Spring Security
- **数据访问**: Spring Data
- **API文档**: Swagger/OpenAPI
- **测试**: JUnit, Postman

## 项目模块说明

### 前端模块

1. **blocs**: 业务逻辑组件，处理状态管理
2. **models**: 数据模型，定义应用中使用的数据结构
3. **repositories**: 数据仓库，负责数据获取和持久化
4. **screens**: 页面组件，用户界面实现
5. **services**: 服务层，处理API调用和业务逻辑
6. **utils**: 工具类，提供通用功能

### 后端模块

1. **common**: 通用工具和常量定义
2. **config**: 应用配置，包括数据库、安全等配置
3. **domain**: 领域模型，定义业务实体
4. **repository**: 数据访问层，处理数据库操作
5. **security**: 安全相关，包括认证和授权
6. **service**: 业务服务层，实现核心业务逻辑
7. **web**: Web控制器，处理HTTP请求和响应

## 开发流程

项目采用敏捷开发方法，通过迭代方式进行开发。前端和后端团队协作，使用Git进行版本控制，通过Postman进行API测试。

## 文档资源

- 需求文档: 详细的功能需求说明
- 原型图: UI/UX设计原型
- 测试计划与文档: 测试策略和测试用例
- 后端开发文档: API设计和实现说明
- 前端产品敏捷迭代计划: 前端开发计划和里程碑