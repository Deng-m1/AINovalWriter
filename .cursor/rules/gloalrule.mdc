---
description: 
globs: 
alwaysApply: false
---

# AI写作软件项目全局配置
project_config:
  name: "ai-novel-assistant"
  description: "AI驱动的小说创作管理系统"

# 后端配置
backend:
  framework: "spring-boot"
  version: "3.2.0"
  java_version: "23"
  base_package: "com.ainovel"


# 前端配置
frontend:
  framework: "flutter"
  web_first: true


# 数据结构
  rule：数据结构，noval和act是一对多关系  act和chapter是一对多关系，chapter和sense是一对多关系，sense和摘要是一对一关系

# AINovalWriter 项目架构说明

## 项目概述

AINovalWriter 是一个AI辅助小说创作平台，包含前端应用（Flutter）和后端服务（Spring Boot）两个主要部分。

## 目录结构

```
AINovalWriter/
├── AINoval/                     # Flutter 前端应用目录
│   ├── analysis_options.yaml    # Dart 代码分析器配置文件
│   ├── build/                   # Flutter 构建输出目录
│   │   └── flutter_assets/      # Flutter 应用资源文件
│   │       ├── AssetManifest.bin.json # 二进制资源清单
│   │       ├── AssetManifest.json   # JSON 格式资源清单
│   │       ├── FontManifest.json    # 字体清单
│   │       └── packages/            # 依赖包资源
│   │           └── fluttertoast/    # fluttertoast 包资源
│   │               └── assets/
│   │                   ├── toastify.css # toast 样式文件
│   │                   └── toastify.js  # toast 脚本文件
│   ├── devtools_options.yaml    # Dart DevTools 配置文件
│   ├── fix_dollar_e/            # (可能是一个修复特定问题的工具或脚本目录)
│   │   └── bin/
│   │       └── fix_dollar_e.dart # 修复脚本
│   ├── flutter_01.log           # Flutter 运行日志
│   ├── lib/                     # Flutter 应用核心代码目录
│   │   ├── blocs/               # BLoC (Business Logic Component) 状态管理
│   │   │   ├── ai_config/       # AI 配置相关 BLoC
│   │   │   │   ├── ai_config_bloc.dart  # AI 配置 BLoC 实现
│   │   │   │   ├── ai_config_event.dart # AI 配置事件
│   │   │   │   └── ai_config_state.dart # AI 配置状态
│   │   │   ├── auth/            # 认证相关 BLoC
│   │   │   │   └── auth_bloc.dart     # 认证 BLoC 实现
│   │   │   ├── chat/            # 聊天相关 BLoC
│   │   │   │   ├── chat_bloc.dart     # 聊天 BLoC 实现
│   │   │   │   ├── chat_event.dart    # 聊天事件
│   │   │   │   └── chat_state.dart    # 聊天状态
│   │   │   ├── editor/          # 编辑器相关 BLoC
│   │   │   │   ├── editor_bloc.dart   # 编辑器 BLoC 实现
│   │   │   │   ├── editor_event.dart  # 编辑器事件
│   │   │   │   └── editor_state.dart  # 编辑器状态
│   │   │   ├── editor_version_bloc.dart  # 编辑器版本控制 BLoC
│   │   │   ├── editor_version_event.dart # 编辑器版本控制事件
│   │   │   ├── editor_version_state.dart # 编辑器版本控制状态
│   │   │   ├── novel_import/    # 小说导入相关 BLoC
│   │   │   │   ├── novel_import_bloc.dart  # 小说导入 BLoC 实现
│   │   │   │   ├── novel_import_event.dart # 小说导入事件
│   │   │   │   └── novel_import_state.dart # 小说导入状态
│   │   │   └── novel_list/      # 小说列表相关 BLoC
│   │   │       ├── novel_list_bloc.dart   # 小说列表 BLoC 实现
│   │   │       └── novel_list_event.dart  # 小说列表事件
│   │   ├── components/          # 可复用 UI 组件
│   │   │   └── editable_title.dart # 可编辑标题组件
│   │   ├── config/              # 应用配置
│   │   │   └── app_config.dart    # 应用全局配置
│   │   ├── docs/                # 文档目录 (可能包含开发者文档)
│   │   │   └── logger_guide.md    # 日志工具使用指南 (副本)
│   │   ├── l10n/                # 本地化/国际化
│   │   │   └── l10n.dart          # 本地化配置入口
│   │   ├── main.dart            # Flutter 应用入口文件
│   │   ├── models/              # 数据模型 (Data Models)
│   │   │   ├── chat_message.dart  # 聊天消息模型
│   │   │   ├── chat_models.dart   # 聊天相关模型集合
│   │   │   ├── editor_content.dart # 编辑器内容模型
│   │   │   ├── editor_settings.dart # 编辑器设置模型
│   │   │   ├── import_status.dart # 文件导入状态模型
│   │   │   ├── novel_structure.dart # 小说结构模型
│   │   │   ├── novel_summary.dart # 小说摘要模型
│   │   │   ├── revision.dart      # 修订版本模型
│   │   │   ├── scene_version.dart # 场景版本模型
│   │   │   └── user_ai_model_config_model.dart # 用户 AI 模型配置模型
│   │   ├── repositories/        # 数据仓库 (用于获取和存储数据)
│   │   │   └── codex_repository.dart # Codex (知识库) 数据仓库
│   │   ├── screens/             # 应用屏幕/页面 (UI Screens)
│   │   │   ├── ai_config/       # AI 配置管理屏幕
│   │   │   │   ├── ai_config_management_screen.dart # AI 配置管理屏幕实现
│   │   │   │   └── widgets/         # AI 配置屏幕相关的小部件
│   │   │   │       ├── add_edit_ai_config_dialog.dart # 添加/编辑 AI 配置对话框
│   │   │   │       ├── ai_config_list_item.dart # AI 配置列表项
│   │   │   │       └── ai_model_selector.dart # AI 模型选择器
│   │   │   ├── auth/            # 认证屏幕
│   │   │   │   └── login_screen.dart  # 登录屏幕
│   │   │   ├── chat/            # 聊天屏幕
│   │   │   │   ├── chat_screen.dart   # 聊天屏幕实现
│   │   │   │   └── widgets/         # 聊天屏幕相关的小部件
│   │   │   │       ├── ai_chat_sidebar.dart # AI 聊天侧边栏
│   │   │   │       ├── chat_input.dart      # 聊天输入框
│   │   │   │       ├── chat_message_bubble.dart # 聊天消息气泡
│   │   │   │       ├── chat_sidebar.dart    # 聊天会话侧边栏
│   │   │   │       ├── context_panel.dart   # 上下文面板
│   │   │   │       ├── model_selector_dropdown.dart # 模型选择下拉菜单
│   │   │   │       └── typing_indicator.dart # 输入状态指示器
│   │   │   ├── editor/          # 编辑器屏幕
│   │   │   │   ├── components/      # 编辑器屏幕的主要组成部分
│   │   │   │   │   ├── act_section.dart     # 幕/卷章节部分
│   │   │   │   │   ├── chapter_section.dart # 章章节部分
│   │   │   │   │   ├── editor_app_bar.dart  # 编辑器应用栏
│   │   │   │   │   ├── editor_main_area.dart # 编辑器主区域
│   │   │   │   │   ├── editor_sidebar.dart  # 编辑器侧边栏 (大纲等)
│   │   │   │   │   └── scene_editor.dart    # 场景编辑器
│   │   │   │   ├── editor_screen.dart   # 编辑器屏幕实现
│   │   │   │   └── widgets/         # 编辑器屏幕相关的小部件
│   │   │   │       ├── ai_chat_button.dart  # AI 聊天按钮
│   │   │   │       ├── editor_settings_panel.dart # 编辑器设置面板
│   │   │   │       ├── editor_toolbar.dart  # 编辑器工具栏
│   │   │   │       ├── README.md          # 编辑器小部件说明
│   │   │   │       ├── selection_toolbar.dart # 文本选择工具栏
│   │   │   │       └── word_count_display.dart # 字数统计显示
│   │   │   ├── novel_list/      # 小说列表屏幕
│   │   │   │   ├── novel_list_screen.dart # 小说列表屏幕实现
│   │   │   │   └── widgets/         # 小说列表屏幕相关的小部件
│   │   │   │       ├── continue_writing_section.dart # 继续写作部分
│   │   │   │       ├── empty_novel_view.dart # 空小说列表视图
│   │   │   │       ├── header_section.dart  # 头部区域 (标题、按钮等)
│   │   │   │       ├── import_novel_dialog.dart # 导入小说对话框
│   │   │   │       ├── loading_view.dart    # 加载中视图
│   │   │   │       ├── novel_card.dart      # 小说卡片
│   │   │   │       ├── novel_list_error_view.dart # 小说列表错误视图
│   │   │   │       └── search_filter_bar.dart # 搜索和筛选栏
│   │   │   └── settings/        # 设置屏幕
│   │   │       ├── settings_panel.dart # 设置面板
│   │   │       └── widgets/         # 设置屏幕相关的小部件
│   │   │           └── ai_config_form.dart # AI 配置表单
│   │   ├── services/            # 应用服务 (如 API 调用、本地存储等)
│   │   │   ├── api_service/     # API 服务相关代码
│   │   │   │   ├── base/            # API 客户端基础类
│   │   │   │   │   ├── api_client.dart    # API 客户端实现
│   │   │   │   │   └── api_exception.dart # API 异常类
│   │   │   │   ├── README.md          # API 服务说明
│   │   │   │   └── repositories/    # API 数据仓库接口和实现
│   │   │   │       ├── chat_repository.dart # 聊天 API 仓库接口
│   │   │   │       ├── editor_repository.dart # 编辑器 API 仓库接口
│   │   │   │       ├── impl/            # API 仓库实现
│   │   │   │       │   ├── chat_repository_impl.dart # 聊天 API 仓库实现
│   │   │   │       │   ├── editor_repository_impl.dart # 编辑器 API 仓库实现
│   │   │   │       │   ├── novel_repository_impl.dart # 小说 API 仓库实现
│   │   │   │       │   └── user_ai_model_config_repository_impl.dart # 用户 AI 配置 API 仓库实现
│   │   │   │       ├── novel_repository.dart # 小说 API 仓库接口
│   │   │   │       └── user_ai_model_config_repository.dart # 用户 AI 配置 API 仓库接口
│   │   │   ├── auth_service.dart    # 认证服务
│   │   │   ├── context_provider.dart # (可能是用于提供全局上下文的服务)
│   │   │   ├── local_storage_service.dart # 本地存储服务
│   │   │   ├── sync_service.dart    # 同步服务
│   │   │   └── websocket_service.dart # WebSocket 服务
│   │   ├── theme/               # 应用主题和样式
│   │   │   └── text_styles.dart   # 文本样式定义
│   │   ├── ui/                  # 通用 UI 元素
│   │   │   ├── common/            # 通用小部件
│   │   │   │   ├── loading_indicator.dart # 加载指示器
│   │   │   │   └── no_data_placeholder.dart # 无数据占位符
│   │   │   ├── dialogs/           # 对话框
│   │   │   │   └── scene_history_dialog.dart # 场景历史对话框
│   │   │   └── screens/           # (此处的 screens 可能是旧结构或特定 UI 组件)
│   │   │       └── editor_screen.dart # (重复的编辑器屏幕?)
│   │   └── utils/               # 工具类
│   │       ├── app_theme.dart         # 应用主题工具 (可能与 theme/ 重复或协作)
│   │       ├── date_formatter.dart    # 日期格式化工具
│   │       ├── date_time_parser.dart  # 日期时间解析工具
│   │       ├── debouncer.dart         # 防抖动工具
│   │       ├── logger.dart            # 日志记录工具
│   │       ├── logger_guide.md        # 日志工具使用指南
│   │       ├── logger_usage_examples.dart # 日志工具使用示例
│   │       ├── mock_data.dart         # 模拟数据
│   │       ├── mock_data_generator.dart # 模拟数据生成器
│   │       └── word_count_analyzer.dart # 字数统计分析器
│   ├── pubspec.yaml             # Flutter 项目配置文件 (依赖项、资源等)
│   ├── README.md                # Flutter 项目说明文件
│   ├── scripts/                 # 脚本目录
│   │   └── replace_print_with_logger.dart # 替换 print 为 logger 的脚本
│   └── web/                     # Web 平台特定文件
│       ├── index.html           # Web 应用入口 HTML
│       └── manifest.json        # Web 应用清单文件
├── AINovalServer/               # Java Spring Boot 后端应用目录
│   ├── AINoval_API_Collection.json # Postman API 集合 (副本?)
│   ├── AINoval_API_Tests.postman_collection.json # Postman API 测试集合
│   ├── AINoval_Performance_Tests.postman_collection.json # Postman 性能测试集合
│   ├── PERFORMANCE_TESTING.md   # 性能测试说明文档
│   ├── performance_test_script.js # 性能测试脚本 (JavaScript)
│   ├── pom.xml                  # Maven 项目配置文件
│   ├── README.md                # 后端项目说明文件
│   ├── Sprint1开发总结.md       # Sprint 1 开发总结
│   ├── src/                     # 源代码和资源目录
│   │   ├── main/                # 主代码目录
│   │   │   ├── java/            # Java 源代码
│   │   │   │   └── com/
│   │   │   │       └── ainovel/
│   │   │   │           └── server/
│   │   │   │               ├── AiNovelServerApplication.java # Spring Boot 应用入口类
│   │   │   │               ├── common/           # 通用模块
│   │   │   │               │   ├── exception/    # 自定义异常
│   │   │   │               │   │   ├── ResourceNotFoundException.java # 资源未找到异常
│   │   │   │               │   │   └── ValidationException.java # 验证异常
│   │   │   │               │   ├── model/        # 通用模型
│   │   │   │               │   │   └── ErrorResponse.java # 错误响应模型
│   │   │   │               │   ├── security/     # 通用安全相关
│   │   │   │               │   │   └── CurrentUser.java # 获取当前用户信息注解
│   │   │   │               │   └── util/         # 通用工具类
│   │   │   │               │       ├── MockDataGenerator.java # 模拟数据生成器
│   │   │   │               │       └── PerformanceTestUtil.java # 性能测试工具类
│   │   │   │               ├── config/           # 配置类
│   │   │   │               │   ├── ChatLanguageModelConfig.java # 聊天语言模型配置
│   │   │   │               │   ├── MongoConfig.java       # MongoDB 配置
│   │   │   │               │   ├── MongoQueryCounterAspect.java # MongoDB 查询计数切面 (用于监控)
│   │   │   │               │   ├── MonitoringConfig.java  # 监控配置
│   │   │   │               │   ├── ProxyConfig.java       # 代理配置
│   │   │   │               │   ├── RagConfig.java         # RAG (检索增强生成) 配置
│   │   │   │               │   ├── SecurityBeanConfig.java # 安全相关 Bean 配置
│   │   │   │               │   ├── SecurityConfig.java    # Spring Security 配置
│   │   │   │               │   ├── TestSecurityConfig.java # 测试环境安全配置
│   │   │   │               │   ├── VectorStoreConfig.java # 向量存储配置
│   │   │   │               │   └── VirtualThreadConfig.java # 虚拟线程配置
│   │   │   │               ├── domain/           # 领域模型和 DTO
│   │   │   │               │   ├── dto/            # 数据传输对象 (DTO)
│   │   │   │               │   │   ├── ParsedNovelData.java # 解析后的小说数据 DTO
│   │   │   │               │   │   └── ParsedSceneData.java # 解析后的场景数据 DTO
│   │   │   │               │   └── model/        # 领域模型 (实体类)
│   │   │   │               │       ├── AIChatMessage.java # AI 聊天消息实体
│   │   │   │               │       ├── AIChatSession.java # AI 聊天会话实体
│   │   │   │               │       ├── AIInteraction.java # AI 交互记录实体 (可能)
│   │   │   │               │       ├── AIRequest.java     # AI 请求模型 (可能)
│   │   │   │               │       ├── AIResponse.java    # AI 响应模型 (可能)
│   │   │   │               │       ├── BaseAIRequest.java # 基础 AI 请求模型 (可能)
│   │   │   │               │       ├── Character.java     # 角色实体
│   │   │   │               │       ├── GenerateNextOutlinesDTO.java # 生成后续大纲 DTO (放在 model?)
│   │   │   │               │       ├── KnowledgeChunk.java # 知识库分块实体
│   │   │   │               │       ├── Novel.java         # 小说实体
│   │   │   │               │       ├── PromptTemplate.java # 提示词模板实体
│   │   │   │               │       ├── Scene.java         # 场景实体
│   │   │   │               │       ├── SceneVersionDiff.java # 场景版本差异实体
│   │   │   │               │       ├── Setting.java       # 设定实体
│   │   │   │               │       ├── User.java          # 用户实体
│   │   │   │               │       └── UserAIModelConfig.java # 用户 AI 模型配置实体
│   │   │   │               ├── repository/       # 数据仓库接口 (Repository Interfaces)
│   │   │   │               │   ├── AIChatMessageRepository.java # AI 聊天消息仓库
│   │   │   │               │   ├── AIChatSessionRepository.java # AI 聊天会话仓库
│   │   │   │               │   ├── custom/           # 自定义仓库接口
│   │   │   │               │   │   └── CustomUserRepository.java # 自定义用户仓库接口
│   │   │   │               │   ├── impl/             # 仓库实现 (如果需要复杂逻辑)
│   │   │   │               │   │   └── UserRepositoryImpl.java # 用户仓库实现
│   │   │   │               │   ├── KnowledgeChunkRepository.java # 知识库分块仓库
│   │   │   │               │   ├── NovelRepository.java   # 小说仓库
│   │   │   │               │   ├── SceneRepository.java   # 场景仓库
│   │   │   │               │   ├── UserAIModelConfigRepository.java # 用户 AI 模型配置仓库
│   │   │   │               │   └── UserRepository.java    # 用户仓库
│   │   │   │               ├── security/         # 安全相关实现
│   │   │   │               │   ├── JwtAuthenticationManager.java # JWT 认证管理器
│   │   │   │               │   └── JwtServerAuthenticationConverter.java # JWT 服务器认证转换器
│   │   │   │               ├── service/          # 服务层接口和实现
│   │   │   │               │   ├── ai/             # AI 模型提供者相关
│   │   │   │               │   │   ├── AbstractAIModelProvider.java # 抽象 AI 模型提供者
│   │   │   │               │   │   ├── AIModelProvider.java # AI 模型提供者接口
│   │   │   │               │   │   ├── AnthropicModelProvider.java # Anthropic 模型提供者
│   │   │   │               │   │   ├── GeminiModelProvider.java # Gemini 模型提供者
│   │   │   │               │   │   ├── langchain4j/    # LangChain4j 集成
│   │   │   │               │   │   │   ├── AnthropicLangChain4jModelProvider.java # Anthropic LangChain4j 提供者
│   │   │   │               │   │   │   ├── GeminiLangChain4jModelProvider.java # Gemini LangChain4j 提供者
│   │   │   │               │   │   │   ├── LangChain4jModelProvider.java # LangChain4j 提供者接口
│   │   │   │               │   │   │   ├── OpenAILangChain4jModelProvider.java # OpenAI LangChain4j 提供者
│   │   │   │               │   │   │   └── SiliconFlowLangChain4jModelProvider.java # SiliconFlow LangChain4j 提供者
│   │   │   │               │   │   ├── OpenAIModelProvider.java # OpenAI 模型提供者
│   │   │   │               │   │   └── SiliconFlowModelProvider.java # SiliconFlow 模型提供者
│   │   │   │               │   ├── impl/           # 服务层实现
│   │   │   │               │   │   ├── AIChatServiceImpl.java # AI 聊天服务实现
│   │   │   │               │   │   ├── AIServiceImpl.java # AI 服务实现
│   │   │   │               │   │   ├── EmbeddingServiceImpl.java # Embedding 服务实现
│   │   │   │               │   │   ├── ImportServiceImpl.java # 导入服务实现
│   │   │   │               │   │   ├── IndexingServiceImpl.java # 索引服务实现
│   │   │   │               │   │   ├── JwtServiceImpl.java # JWT 服务实现
│   │   │   │               │   │   ├── KnowledgeServiceImpl.java # 知识库服务实现
│   │   │   │               │   │   ├── NovelAIServiceImpl.java # 小说 AI 服务实现
│   │   │   │               │   │   ├── NovelRagAssistantImpl.java # 小说 RAG 助手实现
│   │   │   │               │   │   ├── NovelServiceImpl.java # 小说服务实现
│   │   │   │               │   │   ├── PromptServiceImpl.java # 提示词服务实现
│   │   │   │               │   │   ├── SceneServiceImpl.java # 场景服务实现
│   │   │   │               │   │   ├── TxtNovelParser.java # TXT 小说解析器实现
│   │   │   │               │   │   ├── UserAIModelConfigServiceImpl.java # 用户 AI 配置服务实现
│   │   │   │               │   │   └── UserServiceImpl.java # 用户服务实现
│   │   │   │               │   ├── rag/            # RAG 相关服务
│   │   │   │               │   │   ├── ChromaEmbeddingStoreAdapter.java # Chroma Embedding 存储适配器
│   │   │   │               │   │   ├── LangChain4jEmbeddingModel.java # LangChain4j Embedding 模型适配
│   │   │   │               │   │   └── NovelRagAssistant.java # 小说 RAG 助手接口 (副本?)
│   │   │   │               │   ├── vectorstore/    # 向量存储相关
│   │   │   │               │   │   ├── ChromaVectorStore.java # Chroma 向量存储实现
│   │   │   │               │   │   ├── SearchResult.java # 向量搜索结果
│   │   │   │               │   │   └── VectorStore.java # 向量存储接口
│   │   │   │               │   ├── AIChatService.java # AI 聊天服务接口
│   │   │   │               │   ├── AIService.java     # AI 服务接口
│   │   │   │               │   ├── EmbeddingService.java # Embedding 服务接口
│   │   │   │               │   ├── ImportService.java # 导入服务接口
│   │   │   │               │   ├── IndexingService.java # 索引服务接口
│   │   │   │               │   ├── JwtService.java    # JWT 服务接口
│   │   │   │               │   ├── KnowledgeService.java # 知识库服务接口
│   │   │   │               │   ├── NovelAIService.java # 小说 AI 服务接口
│   │   │   │               │   ├── NovelParser.java   # 小说解析器接口
│   │   │   │               │   ├── NovelRagAssistant.java # 小说 RAG 助手接口
│   │   │   │               │   ├── NovelService.java  # 小说服务接口
│   │   │   │               │   ├── PromptService.java # 提示词服务接口
│   │   │   │               │   ├── SceneService.java  # 场景服务接口
│   │   │   │               │   ├── UserAIModelConfigService.java # 用户 AI 配置服务接口
│   │   │   │               │   └── UserService.java   # 用户服务接口
│   │   │   │               └── web/              # Web 层 (Controllers and DTOs)
│   │   │   │                   ├── base/           # 基础 Controller
│   │   │   │                   │   └── ReactiveBaseController.java # 响应式基础 Controller
│   │   │   │                   ├── controller/     # 控制器 (Controllers)
│   │   │   │                   │   ├── AIChatController.java # AI 聊天控制器
│   │   │   │                   │   ├── AuthController.java # 认证控制器
│   │   │   │                   │   ├── MongoTestController.java # MongoDB 测试控制器
│   │   │   │                   │   ├── NovelAIController.java # 小说 AI 控制器
│   │   │   │                   │   ├── NovelController.java # 小说控制器
│   │   │   │                   │   ├── RagController.java # RAG 控制器
│   │   │   │                   │   ├── SceneController.java # 场景控制器
│   │   │   │                   │   ├── SecurityTestController.java # 安全测试控制器
│   │   │   │                   │   ├── UserAIModelConfigController.java # 用户 AI 配置控制器
│   │   │   │                   │   └── UserController.java # 用户控制器
│   │   │   │                   ├── dto/            # Web 层 DTOs (请求/响应)
│   │   │   │                   │   ├── AIModelConfigDto.java # AI 模型配置 DTO
│   │   │   │                   │   ├── ApiKeyValidationRequest.java # API Key 验证请求 DTO
│   │   │   │                   │   ├── ApiKeyValidationResponse.java # API Key 验证响应 DTO
│   │   │   │                   │   ├── AuthorIdDto.java   # 作者 ID DTO
│   │   │   │                   │   ├── AuthRequest.java   # 认证请求 DTO
│   │   │   │                   │   ├── AuthResponse.java  # 认证响应 DTO
│   │   │   │                   │   ├── ChangePasswordRequest.java # 修改密码请求 DTO
│   │   │   │                   │   ├── ChapterIdDto.java  # 章节 ID DTO
│   │   │   │                   │   ├── ChapterSceneDto.java # 章节场景 DTO
│   │   │   │                   │   ├── ChapterScenesDto.java # 包含多个场景的章节 DTO
│   │   │   │                   │   ├── ConfigIndexDto.java # 配置索引 DTO
│   │   │   │                   │   ├── CreateUserAIModelConfigRequest.java # 创建用户 AI 配置请求 DTO
│   │   │   │                   │   ├── ErrorResponse.java # 错误响应 DTO (副本?)
│   │   │   │                   │   ├── GenerateNextOutlinesDTO.java # 生成后续大纲 DTO (副本?)
│   │   │   │                   │   ├── IdDto.java         # 通用 ID DTO
│   │   │   │                   │   ├── ImportStatus.java  # 导入状态 DTO (副本?)
│   │   │   │                   │   ├── JobIdResponse.java # 任务 ID 响应 DTO
│   │   │   │                   │   ├── ListUserConfigsRequest.java # 列出用户配置请求 DTO
│   │   │   │                   │   ├── NovelChapterDto.java # 小说章节 DTO
│   │   │   │                   │   ├── NovelChapterSceneDto.java # 小说章节场景 DTO
│   │   │   │                   │   ├── NovelIdDto.java    # 小说 ID DTO
│   │   │   │                   │   ├── NovelIdTypeDto.java # 小说 ID 和类型 DTO
│   │   │   │                   │   ├── NovelUpdateDto.java # 小说更新 DTO
│   │   │   │                   │   ├── NovelWithScenesDto.java # 包含场景的小说 DTO
│   │   │   │                   │   ├── NovelWithScenesUpdateDto.java # 更新包含场景的小说 DTO
│   │   │   │                   │   ├── ProviderModelsRequest.java # 提供商模型请求 DTO
│   │   │   │                   │   ├── ProxyConfigRequest.java # 代理配置请求 DTO
│   │   │   │                   │   ├── RagQueryDto.java   # RAG 查询 DTO
│   │   │   │                   │   ├── RagQueryResultDto.java # RAG 查询结果 DTO
│   │   │   │                   │   ├── RefreshTokenRequest.java # 刷新令牌请求 DTO
│   │   │   │                   │   ├── RevisionRequest.java # 版本请求 DTO
│   │   │   │                   │   ├── SceneContentUpdateDto.java # 场景内容更新 DTO
│   │   │   │                   │   ├── SceneDeleteDto.java # 场景删除 DTO
│   │   │   │                   │   ├── SceneRestoreDto.java # 场景恢复 DTO
│   │   │   │                   │   ├── SceneSearchDto.java # 场景搜索 DTO
│   │   │   │                   │   ├── SceneUpdateDto.java # 场景更新 DTO
│   │   │   │                   │   ├── SceneVersionCompareDto.java # 场景版本比较 DTO
│   │   │   │                   │   ├── SceneVersionDiff.java # 场景版本差异 DTO (副本?)
│   │   │   │                   │   ├── SessionCreateDto.java # 会话创建 DTO
│   │   │   │                   │   ├── SessionMessageDto.java # 会话消息 DTO
│   │   │   │                   │   ├── SessionUpdateDto.java # 会话更新 DTO
│   │   │   │                   │   ├── SuggestionRequest.java # 建议请求 DTO
│   │   │   │                   │   ├── UpdateUserAIModelConfigRequest.java # 更新用户 AI 配置请求 DTO
│   │   │   │                   │   ├── UserAIModelConfigResponse.java # 用户 AI 配置响应 DTO
│   │   │   │                   │   ├── UserIdConfigIndexDto.java # 用户 ID 和配置索引 DTO
│   │   │   │                   │   ├── UserIdDto.java     # 用户 ID DTO
│   │   │   │                   │   ├── UserRegistrationRequest.java # 用户注册请求 DTO
│   │   │   │                   │   └── UserUpdateDto.java # 用户更新 DTO
│   │   │   │                   └── GeminiTestController.java # Gemini 测试控制器
│   │   │   └── resources/       # 资源文件
│   │   │       ├── application-dev.yml # 开发环境配置文件
│   │   │       ├── application-performance-test.yml # 性能测试环境配置文件
│   │   │       ├── application-test.yml # 测试环境配置文件
│   │   │       ├── application.yml    # 主配置文件
│   │   │       └── static/          # 静态资源
│   │   │           └── gemini-test.html # Gemini 测试页面
│   │   └── test/                # 测试代码目录
│   │       ├── java/            # Java 测试代码
│   │       │   └── com/
│   │       │       └── ainovel/
│   │       │           └── server/
│   │       │               ├── performance/ # 性能测试相关代码
│   │       │               │   ├── PerformanceTestRunner.java # 性能测试运行器
│   │       │               │   ├── simulation/    # 性能测试模拟场景
│   │       │               │   │   ├── AIServiceSimulation.java # AI 服务模拟
│   │       │               │   │   ├── NovelServiceSimulation.java # 小说服务模拟
│   │       │               │   │   └── VirtualThreadVsTraditionalSimulation.java # 虚拟线程 vs 传统线程模拟
│   │       │               │   ├── util/          # 性能测试工具类 (副本?)
│   │       │               │   │   └── PerformanceTestUtil.java
│   │       │               │   └── VirtualThreadPerformanceTest.java # 虚拟线程性能测试
│   │       │               └── service/       # 服务层测试
│   │       │                   └── SceneServiceVersionTest.java # 场景服务版本功能测试
│   │       └── resources/       # 测试资源文件
│   │           └── performance-test-report-template.md # 性能测试报告模板
│   ├── start-performance-test.sh # 启动性能测试的 Shell 脚本
│   ├── target/                  # Maven 构建输出目录
│   │   ├── classes/             # 编译后的类文件和资源文件 (副本)
│   │   │   ├── application-dev.yml
│   │   │   ├── application-performance-test.yml
│   │   │   ├── application-test.yml
│   │   │   ├── application.yml
│   │   │   └── static/
│   │   │       └── gemini-test.html
│   │   └── test-classes/        # 编译后的测试类文件和资源文件
│   │       └── performance-test-report-template.md
│   └── 设计文档/                # 后端设计文档
│       ├── 小说导入功能 - 高性能实施方案.md # 小说导入功能高性能方案
│       └── 小说导入功能设计方案 (更新版).md # 小说导入功能设计方案
├── postman/                     # Postman 相关文件
│   ├── AINoval_API_Collection.json # API 集合 (副本?)
│   ├── AINovalWriter_Test_API.json # API 测试集合 (副本?)
│   └── README.md                # Postman 使用说明
├── target/                      # 顶层 target 目录 (可能包含聚合报告)
│   └── performance-reports/     # 性能测试报告
│       ├── performance_test_platform_50_users_20250313_101351.md # 平台线程模型性能测试报告
│       └── performance_test_virtual_50_users_20250313_101432.md # 虚拟线程模型性能测试报告
├── temp.java                    # 临时 Java 文件 (可能无用)
├── 版本控制功能说明.md          # 版本控制功能说明文档
├── 前端产品敏捷迭代计划/        # 前端产品迭代计划目录
│   └── 前端产品迭代计划.md      # 前端产品迭代计划文档
├── 原型图/                      # 原型图目录
│   └── 剧情推演html原型图和需求文档/ # 剧情推演原型和需求
│       └── next_outline_prototype.html # 剧情推演 HTML 原型
├── 后端开发文档/                # 后端开发文档目录
│   ├── AI小说助手系统后端概要设计文档.md # 后端概要设计文档
│   ├── AI小说助手系统敏捷开发计划 - 技术验证阶段（调整版）.md # 敏捷开发计划 (技术验证调整版)
│   ├── AI小说助手系统敏捷开发计划 - 边验证边开发模式.md # 敏捷开发计划 (边验证边开发模式)
│   ├── spint1-2.md              # Sprint 1-2 相关文档 (可能为总结或计划)
│   ├── 技术评估.md              # 技术评估文档
│   └── 迭代日记.md              # 迭代开发日记
├── 测试计划与文档/              # 测试计划与文档目录
│   ├── 后端接口文档.md          # 后端接口文档
│   ├── 改进报告.md              # 改进报告
│   ├── 第一次测试计划与功能点.md # 第一次测试计划与功能点
│   └── 第二次迭代第一次代码评审.md # 第二次迭代第一次代码评审记录
├── 需求文档/                    # 需求文档目录
│   ├── prd.md                   # 产品需求文档 (PRD)
│   ├── requirements_validation.md # 需求验证文档
│   ├── user_flow_and_wireframes.md # 用户流程和线框图文档
│   ├── 前端概要设计文档.md      # 前端概要设计文档
│   ├── 前端详细设计文档.(小说列表模块,编辑器模块).md # 前端详细设计 (小说列表, 编辑器)
│   ├── 前端详细设计文档（AI聊天模块）.md # 前端详细设计 (AI 聊天)
│   ├── 前端详细设计文档（Codex知识库模块）.md # 前端详细设计 (Codex 知识库)
│   ├── 前端详细设计文档（小说计划预览模块）.md # 前端详细设计 (小说计划预览)
│   └── 前端详细设计文档（文件导出模块详细设计）.md # 前端详细设计 (文件导出)
└── 项目架构说明.md              # 项目整体架构说明文档
```

## 技术架构

### 前端技术栈

- **框架**: Flutter
- **状态管理**: Bloc模式
- **网络请求**: 服务层与仓库模式
- **国际化**: l10n支持

### 后端技术栈

- **框架**: Spring Boot
- **安全**: Spring Security
- **数据访问**: Spring Data
- **API文档**: Swagger/OpenAPI
- **测试**: JUnit, Postman



## 开发流程

项目采用敏捷开发方法，通过迭代方式进行开发。前端和后端团队协作，使用Git进行版本控制，通过Postman进行API测试。

## 文档资源

- 需求文档: 详细的功能需求说明
- 原型图: UI/UX设计原型
- 测试计划与文档: 测试策略和测试用例
- 后端开发文档: API设计和实现说明
- 前端产品敏捷迭代计划: 前端开发计划和里程碑